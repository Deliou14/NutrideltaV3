# Generated by Django 2.1.5 on 2019-02-04 23:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Anc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anc_vitamineA', models.FloatField()),
                ('anc_vitamineC', models.FloatField()),
                ('anc_vitamineD', models.FloatField()),
                ('anc_vitamineE', models.FloatField()),
                ('anc_vitamineK1', models.FloatField()),
                ('anc_vitamineK2', models.FloatField()),
                ('anc_vitamineB1', models.FloatField()),
                ('anc_vitamineB2', models.FloatField()),
                ('anc_vitamineB3', models.FloatField()),
                ('anc_vitamineB5', models.FloatField()),
                ('anc_vitamineB6', models.FloatField()),
                ('anc_vitamineB8', models.FloatField()),
                ('anc_vitamineB9', models.FloatField()),
                ('anc_vitamineB12', models.FloatField()),
                ('anc_calcium', models.FloatField()),
                ('anc_cuivre', models.FloatField()),
                ('anc_fer', models.FloatField()),
                ('anc_iode', models.FloatField()),
                ('anc_magnesium', models.FloatField()),
                ('anc_manganese', models.FloatField()),
                ('anc_phosphore', models.FloatField()),
                ('anc_potassium', models.FloatField()),
                ('anc_selenium', models.FloatField()),
                ('anc_zinc', models.FloatField()),
                ('type_sexe', models.FloatField()),
                ('age_from', models.FloatField()),
                ('age_to', models.FloatField()),
                ('lactation', models.FloatField()),
                ('grossesse', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Category_Aliment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('poid_portion', models.FloatField()),
                ('vitamineA', models.FloatField()),
                ('vitamineC', models.FloatField()),
                ('vitamineD', models.FloatField()),
                ('vitamineE', models.FloatField()),
                ('vitamineK1', models.FloatField()),
                ('vitamineK2', models.FloatField()),
                ('vitamineB1', models.FloatField()),
                ('vitamineB2', models.FloatField()),
                ('vitamineB3', models.FloatField()),
                ('vitamineB5', models.FloatField()),
                ('vitamineB6', models.FloatField()),
                ('vitamineB8', models.FloatField()),
                ('vitamineB9', models.FloatField()),
                ('vitamineB12', models.FloatField()),
                ('calcium', models.FloatField()),
                ('cuivre', models.FloatField()),
                ('fer', models.FloatField()),
                ('iode', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('phosphore', models.FloatField()),
                ('potassium', models.FloatField()),
                ('selenium', models.FloatField()),
                ('zinc', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='LinkObjectifMicro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MicroNutriment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MicroQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('microNutriment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroNutriment')),
            ],
        ),
        migrations.CreateModel(
            name='Objectif',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ObjectifChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('objectif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Objectif')),
            ],
        ),
        migrations.CreateModel(
            name='ObjectifQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('objectif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Objectif')),
            ],
        ),
        migrations.CreateModel(
            name='Pourcentage_microNutri_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('microNutri', models.CharField(max_length=100)),
                ('pourcentage_satisfait', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Prescription_microNutri_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_utilisateur', models.IntegerField()),
                ('vitamineA', models.FloatField()),
                ('vitamineC', models.FloatField()),
                ('vitamineD', models.FloatField()),
                ('vitamineE', models.FloatField()),
                ('vitamineK1', models.FloatField()),
                ('vitamineK2', models.FloatField()),
                ('vitamineB1', models.FloatField()),
                ('vitamineB2', models.FloatField()),
                ('vitamineB3', models.FloatField()),
                ('vitamineB5', models.FloatField()),
                ('vitamineB6', models.FloatField()),
                ('vitamineB8', models.FloatField()),
                ('vitamineB9', models.FloatField()),
                ('vitamineB12', models.FloatField()),
                ('calcium', models.FloatField()),
                ('cuivre', models.FloatField()),
                ('fer', models.FloatField()),
                ('iode', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('phosphore', models.FloatField()),
                ('potassium', models.FloatField()),
                ('selenium', models.FloatField()),
                ('zinc', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifiant', models.IntegerField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Regime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReponseProfil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('age', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109)], default=40)),
                ('taille', models.IntegerField(choices=[(30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199), (200, 200), (201, 201), (202, 202), (203, 203), (204, 204), (205, 205), (206, 206), (207, 207), (208, 208), (209, 209), (210, 210), (211, 211), (212, 212), (213, 213), (214, 214), (215, 215), (216, 216), (217, 217), (218, 218), (219, 219)], default=170)),
                ('poid', models.IntegerField(choices=[(2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99), (100, 100), (101, 101), (102, 102), (103, 103), (104, 104), (105, 105), (106, 106), (107, 107), (108, 108), (109, 109), (110, 110), (111, 111), (112, 112), (113, 113), (114, 114), (115, 115), (116, 116), (117, 117), (118, 118), (119, 119), (120, 120), (121, 121), (122, 122), (123, 123), (124, 124), (125, 125), (126, 126), (127, 127), (128, 128), (129, 129), (130, 130), (131, 131), (132, 132), (133, 133), (134, 134), (135, 135), (136, 136), (137, 137), (138, 138), (139, 139), (140, 140), (141, 141), (142, 142), (143, 143), (144, 144), (145, 145), (146, 146), (147, 147), (148, 148), (149, 149), (150, 150), (151, 151), (152, 152), (153, 153), (154, 154), (155, 155), (156, 156), (157, 157), (158, 158), (159, 159), (160, 160), (161, 161), (162, 162), (163, 163), (164, 164), (165, 165), (166, 166), (167, 167), (168, 168), (169, 169), (170, 170), (171, 171), (172, 172), (173, 173), (174, 174), (175, 175), (176, 176), (177, 177), (178, 178), (179, 179), (180, 180), (181, 181), (182, 182), (183, 183), (184, 184), (185, 185), (186, 186), (187, 187), (188, 188), (189, 189), (190, 190), (191, 191), (192, 192), (193, 193), (194, 194), (195, 195), (196, 196), (197, 197), (198, 198), (199, 199)], default=70)),
                ('sexe', models.BooleanField(default=True, help_text='True=Homme')),
                ('enceinte', models.BooleanField(default=False)),
                ('allaitnte', models.BooleanField(default=False)),
                ('alcool', models.IntegerField(default=0)),
                ('cigarette', models.IntegerField(default=0)),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('regime', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Regime')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesAlimentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('Category_Aliment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Category_Aliment')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesMicroQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesObjectifQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.ObjectifQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='ReponseSport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport', models.CharField(max_length=100)),
                ('depense_energetique', models.FloatField()),
            ],
        ),
        migrations.AddField(
            model_name='reponsesport',
            name='sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Sport'),
        ),
        migrations.AddField(
            model_name='linkobjectifmicro',
            name='microNutriment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroNutriment'),
        ),
        migrations.AddField(
            model_name='linkobjectifmicro',
            name='objectif',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Objectif'),
        ),
    ]
