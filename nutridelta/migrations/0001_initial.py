# Generated by Django 2.1.3 on 2018-12-12 03:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Anc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anc_vitamineA', models.FloatField()),
                ('anc_vitamineC', models.FloatField()),
                ('anc_vitamineD', models.FloatField()),
                ('anc_vitamineE', models.FloatField()),
                ('anc_vitamineK1', models.FloatField()),
                ('anc_vitamineK2', models.FloatField()),
                ('anc_vitamineB1', models.FloatField()),
                ('anc_vitamineB2', models.FloatField()),
                ('anc_vitamineB3', models.FloatField()),
                ('anc_vitamineB5', models.FloatField()),
                ('anc_vitamineB6', models.FloatField()),
                ('anc_vitamineB8', models.FloatField()),
                ('anc_vitamineB9', models.FloatField()),
                ('anc_vitamineB12', models.FloatField()),
                ('anc_calcium', models.FloatField()),
                ('anc_cuivre', models.FloatField()),
                ('anc_fer', models.FloatField()),
                ('anc_iode', models.FloatField()),
                ('anc_magnesium', models.FloatField()),
                ('anc_manganese', models.FloatField()),
                ('anc_phosphore', models.FloatField()),
                ('anc_potassium', models.FloatField()),
                ('anc_selenium', models.FloatField()),
                ('anc_zinc', models.FloatField()),
                ('type_sexe', models.FloatField()),
                ('age_from', models.FloatField()),
                ('age_to', models.FloatField()),
                ('lactation', models.FloatField()),
                ('grossesse', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Category_Aliment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('poid_portion', models.FloatField()),
                ('vitamineA', models.FloatField()),
                ('vitamineC', models.FloatField()),
                ('vitamineD', models.FloatField()),
                ('vitamineE', models.FloatField()),
                ('vitamineK1', models.FloatField()),
                ('vitamineK2', models.FloatField()),
                ('vitamineB1', models.FloatField()),
                ('vitamineB2', models.FloatField()),
                ('vitamineB3', models.FloatField()),
                ('vitamineB5', models.FloatField()),
                ('vitamineB6', models.FloatField()),
                ('vitamineB8', models.FloatField()),
                ('vitamineB9', models.FloatField()),
                ('vitamineB12', models.FloatField()),
                ('calcium', models.FloatField()),
                ('cuivre', models.FloatField()),
                ('fer', models.FloatField()),
                ('iode', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('phosphore', models.FloatField()),
                ('potassium', models.FloatField()),
                ('selenium', models.FloatField()),
                ('zinc', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='LinkObjectifMicro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MicroNutriment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MicroQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('objectif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroNutriment')),
            ],
        ),
        migrations.CreateModel(
            name='Objectif',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ObjectiveQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('objectif', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Objectif')),
            ],
        ),
        migrations.CreateModel(
            name='Pourcentage_microNutri_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('microNutri', models.CharField(max_length=100)),
                ('pourcentage_satisfait', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Prescription_microNutri_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_utilisateur', models.IntegerField()),
                ('vitamineA', models.FloatField()),
                ('vitamineC', models.FloatField()),
                ('vitamineD', models.FloatField()),
                ('vitamineE', models.FloatField()),
                ('vitamineK1', models.FloatField()),
                ('vitamineK2', models.FloatField()),
                ('vitamineB1', models.FloatField()),
                ('vitamineB2', models.FloatField()),
                ('vitamineB3', models.FloatField()),
                ('vitamineB5', models.FloatField()),
                ('vitamineB6', models.FloatField()),
                ('vitamineB8', models.FloatField()),
                ('vitamineB9', models.FloatField()),
                ('vitamineB12', models.FloatField()),
                ('calcium', models.FloatField()),
                ('cuivre', models.FloatField()),
                ('fer', models.FloatField()),
                ('iode', models.FloatField()),
                ('magnesium', models.FloatField()),
                ('manganese', models.FloatField()),
                ('phosphore', models.FloatField()),
                ('potassium', models.FloatField()),
                ('selenium', models.FloatField()),
                ('zinc', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Regime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReponseProfil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('age', models.FloatField()),
                ('taille', models.FloatField()),
                ('poid', models.FloatField()),
                ('sexe', models.BooleanField()),
                ('enceinte', models.BooleanField()),
                ('allaite', models.BooleanField()),
                ('alcool', models.FloatField()),
                ('cigarette', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('Regime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Regime')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesAlimentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('Category_Aliment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Category_Aliment')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesMicroQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='ReponsesObjectiveQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('value', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('last_modif', models.DateField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.ObjectiveQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='ReponseSport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport', models.CharField(max_length=100)),
                ('depense_energetique', models.FloatField()),
            ],
        ),
        migrations.AddField(
            model_name='reponsesport',
            name='sport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Sport'),
        ),
        migrations.AddField(
            model_name='linkobjectifmicro',
            name='microNutriment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.MicroNutriment'),
        ),
        migrations.AddField(
            model_name='linkobjectifmicro',
            name='objectif',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutridelta.Objectif'),
        ),
    ]
